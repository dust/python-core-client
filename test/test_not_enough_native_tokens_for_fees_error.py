"""
    Radix Core API

    This API provides endpoints from a node for integration with the Radix ledger.  # Overview  > WARNING > > The Core API is __NOT__ intended to be available on the public web. It is > designed to be accessed in a private network.  The Core API is separated into three: * The **Data API** is a read-only api which allows you to view and sync to the state of the ledger. * The **Construction API** allows you to construct and submit a transaction to the network. * The **Key API** allows you to use the keys managed by the node to sign transactions.  The Core API is a low level API primarily designed for network integrations such as exchanges, ledger analytics providers, or hosted ledger data dashboards where detailed ledger data is required and the integrator can be expected to run their node to provide the Core API for their own consumption.  For a higher level API, see the [Gateway API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt-network-gateway/main/generation/gateway-api-spec.yaml).  For node monitoring, see the [System API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/system/api.yaml).  ## Rosetta  The Data API and Construction API is inspired from [Rosetta API](https://www.rosetta-api.org/) most notably:   * Use of a JSON-Based RPC protocol on top of HTTP Post requests   * Use of Operations, Amounts, and Identifiers as universal language to   express asset movement for reading and writing  There are a few notable exceptions to note:   * Fetching of ledger data is through a Transaction stream rather than a   Block stream   * Use of `EntityIdentifier` rather than `AccountIdentifier`   * Use of `OperationGroup` rather than `related_operations` to express related   operations   * Construction endpoints perform coin selection on behalf of the caller.   This has the unfortunate effect of not being able to support high frequency   transactions from a single account. This will be addressed in future updates.   * Construction endpoints are online rather than offline as required by Rosetta  Future versions of the api will aim towards a fully-compliant Rosetta API.  ## Enabling Endpoints  All endpoints are enabled when running a node with the exception of two endpoints, each of which need to be manually configured to access: * `/transactions` endpoint must be enabled with configuration `api.transaction.enable=true`. This is because the transactions endpoint requires additional database storage which may not be needed for users who aren't using this endpoint * `/key/sign` endpoint must be enable with configuration `api.sign.enable=true`. This is a potentially dangerous endpoint if accessible publicly so it must be enabled manually.  ## Client Code Generation  We have found success with generating clients against the [api.yaml specification](https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml). See https://openapi-generator.tech/ for more details.  The OpenAPI generator only supports openapi version 3.0.0 at present, but you can change 3.1.0 to 3.0.0 in the first line of the spec without affecting generation.  # Data API Flow  The Data API can be used to synchronize a full or partial view of the ledger, transaction by transaction.  ![Data API Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/data_sequence_flow.png)  # Construction API Flow  The Construction API can be used to construct and submit transactions to the network.  ![Construction API Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/construction_sequence_flow.png)  Unlike the Rosetta Construction API [specification](https://www.rosetta-api.org/docs/construction_api_introduction.html), this Construction API selects UTXOs on behalf of the caller. This has the unfortunate side effect of not being able to support high frequency transactions from a single account due to UTXO conflicts. This will be addressed in a future release.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import core_client
from core_client.model.above_maximum_validator_fee_increase_error import AboveMaximumValidatorFeeIncreaseError
from core_client.model.below_minimum_stake_error import BelowMinimumStakeError
from core_client.model.core_error import CoreError
from core_client.model.data_object_not_supported_by_entity_error import DataObjectNotSupportedByEntityError
from core_client.model.fee_construction_error import FeeConstructionError
from core_client.model.internal_server_error import InternalServerError
from core_client.model.invalid_address_error import InvalidAddressError
from core_client.model.invalid_data_object_error import InvalidDataObjectError
from core_client.model.invalid_fee_payer_entity_error import InvalidFeePayerEntityError
from core_client.model.invalid_hex_error import InvalidHexError
from core_client.model.invalid_json_error import InvalidJsonError
from core_client.model.invalid_partial_state_identifier_error import InvalidPartialStateIdentifierError
from core_client.model.invalid_public_key_error import InvalidPublicKeyError
from core_client.model.invalid_signature_error import InvalidSignatureError
from core_client.model.invalid_sub_entity_error import InvalidSubEntityError
from core_client.model.invalid_transaction_error import InvalidTransactionError
from core_client.model.invalid_transaction_hash_error import InvalidTransactionHashError
from core_client.model.mempool_full_error import MempoolFullError
from core_client.model.message_too_long_error import MessageTooLongError
from core_client.model.network_not_supported_error import NetworkNotSupportedError
from core_client.model.not_enough_native_tokens_for_fees_error import NotEnoughNativeTokensForFeesError
from core_client.model.not_enough_native_tokens_for_fees_error_all_of import NotEnoughNativeTokensForFeesErrorAllOf
from core_client.model.not_enough_resources_error import NotEnoughResourcesError
from core_client.model.not_validator_entity_error import NotValidatorEntityError
from core_client.model.not_validator_owner_error import NotValidatorOwnerError
from core_client.model.public_key_not_supported_error import PublicKeyNotSupportedError
from core_client.model.resource_amount import ResourceAmount
from core_client.model.resource_deposit_operation_not_supported_by_entity_error import ResourceDepositOperationNotSupportedByEntityError
from core_client.model.resource_withdraw_operation_not_supported_by_entity_error import ResourceWithdrawOperationNotSupportedByEntityError
from core_client.model.state_identifier_not_found_error import StateIdentifierNotFoundError
from core_client.model.substate_dependency_not_found_error import SubstateDependencyNotFoundError
from core_client.model.transaction_not_found_error import TransactionNotFoundError
globals()['AboveMaximumValidatorFeeIncreaseError'] = AboveMaximumValidatorFeeIncreaseError
globals()['BelowMinimumStakeError'] = BelowMinimumStakeError
globals()['CoreError'] = CoreError
globals()['DataObjectNotSupportedByEntityError'] = DataObjectNotSupportedByEntityError
globals()['FeeConstructionError'] = FeeConstructionError
globals()['InternalServerError'] = InternalServerError
globals()['InvalidAddressError'] = InvalidAddressError
globals()['InvalidDataObjectError'] = InvalidDataObjectError
globals()['InvalidFeePayerEntityError'] = InvalidFeePayerEntityError
globals()['InvalidHexError'] = InvalidHexError
globals()['InvalidJsonError'] = InvalidJsonError
globals()['InvalidPartialStateIdentifierError'] = InvalidPartialStateIdentifierError
globals()['InvalidPublicKeyError'] = InvalidPublicKeyError
globals()['InvalidSignatureError'] = InvalidSignatureError
globals()['InvalidSubEntityError'] = InvalidSubEntityError
globals()['InvalidTransactionError'] = InvalidTransactionError
globals()['InvalidTransactionHashError'] = InvalidTransactionHashError
globals()['MempoolFullError'] = MempoolFullError
globals()['MessageTooLongError'] = MessageTooLongError
globals()['NetworkNotSupportedError'] = NetworkNotSupportedError
globals()['NotEnoughNativeTokensForFeesError'] = NotEnoughNativeTokensForFeesError
globals()['NotEnoughNativeTokensForFeesErrorAllOf'] = NotEnoughNativeTokensForFeesErrorAllOf
globals()['NotEnoughResourcesError'] = NotEnoughResourcesError
globals()['NotValidatorEntityError'] = NotValidatorEntityError
globals()['NotValidatorOwnerError'] = NotValidatorOwnerError
globals()['PublicKeyNotSupportedError'] = PublicKeyNotSupportedError
globals()['ResourceAmount'] = ResourceAmount
globals()['ResourceDepositOperationNotSupportedByEntityError'] = ResourceDepositOperationNotSupportedByEntityError
globals()['ResourceWithdrawOperationNotSupportedByEntityError'] = ResourceWithdrawOperationNotSupportedByEntityError
globals()['StateIdentifierNotFoundError'] = StateIdentifierNotFoundError
globals()['SubstateDependencyNotFoundError'] = SubstateDependencyNotFoundError
globals()['TransactionNotFoundError'] = TransactionNotFoundError
from core_client.model.not_enough_native_tokens_for_fees_error import NotEnoughNativeTokensForFeesError


class TestNotEnoughNativeTokensForFeesError(unittest.TestCase):
    """NotEnoughNativeTokensForFeesError unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testNotEnoughNativeTokensForFeesError(self):
        """Test NotEnoughNativeTokensForFeesError"""
        # FIXME: construct object with mandatory attributes with example values
        # model = NotEnoughNativeTokensForFeesError()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
